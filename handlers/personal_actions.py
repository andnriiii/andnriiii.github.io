from time import sleep
from aiogram import types
from dispatcher import bot, dp
import config
from aiogram.dispatcher.filters import Text
import html
import random


# start
@dp.message_handler(commands=('start'), commands_prefix=('/!'))
async def start(message: types.Message):
    await message.answer("–•–∞–π, —è –ö–≤–∞—Ä–¥! –Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –≤–±–∏–≤–∞—Ç–∏ —Ä—É—Å–Ω—é, —Ä–æ–±–∏—Ç–∏ –±—ñ–æ–ª–∞–±–æ—Ä–∞—Ç–æ—Ä—ñ—ó, –∞–±–æ –ø—Ä–æ—Å—Ç–æ –±–∞–Ω–∏—Ç–∏ —ñ –º—É—Ç–∏—Ç–∏ –ª—é–¥–µ–π\n\n–î–ª—è —Ç–æ–≥–æ —â–æ–± –≤–∑–Ω–∞—Ç–∏, —â–æ —è –≤–º—ñ—é, –Ω–∞–ø–∏—à–∏ /help", parse_mode='HTML')
    print(f'{message.from_user.full_name}, {message.from_user.username},{message.from_user.id} Ha scritto Start')


# help
@dp.message_handler(commands=('help'), commands_prefix=('/!'))
async def help(message: types.Message):
    await message.answer("<b>–ú–µ–Ω—é –¥–æ–ø–æ–º–æ–≥–∏:</b>\n\n–¶–µ –±–æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —á–∞—Ç—ñ–≤! –Ø –≤–º—ñ—é –±–∞–Ω–∏—Ç–∏, –º—É—Ç–∏—Ç–∏ –ª—é–¥–µ–π, –∞ —Ç–∞–∫–æ–∂ –≤–±–∏–≤–∞—Ç–∏ —Ä—É—Å–Ω—é, —Å—Ç–∞–≤–∏—Ç–∏ –º—ñ–Ω–∏, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –±–∞–π—Ä–∞–∫—Ç–∞—Ä–æ–º, —ñ —ñ–Ω—à—ñ –¥—Ä—ñ–±–Ω–∏—Ü—ñ\n\n\n<b>–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>\n‚Ä¢<code>/start</code> - —Å—Ç–∞—Ä—Ç—É—î —Ü—é —à—Ç—É–∫—É\n‚Ä¢<code>/help</code> - –º–µ–Ω—é –¥–æ–ø–æ–º–æ–≥–∏\n‚Ä¢<code>/info</code> - —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è\n\n<b>–ö–æ–º–∞–Ω–¥–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è:</b>\n‚Ä¢<code>/mute</code> - –∑–∞–±–æ—Ä–æ–Ω—è—î –ª—é–¥–∏–Ω—ñ –ø–∏—Å–∞—Ç–∏ –Ω–∞ –≥–æ–¥–∏–Ω—É\n‚Ä¢<code>/unmute</code> - —Ä–æ–∑–º—É—á—É—î –ª—é–¥–∏–Ω—É —Ä–∞–Ω—ñ—à–µ –≥–æ–¥–∏–Ω–∏\n‚Ä¢<code>/ban</code> - –±–ª–æ–∫—É—î –ª—é–¥–∏–Ω—É –≤ —á–∞—Ç—ñ\n‚Ä¢<code>/unban</code> - —Ä–æ–∑–±–ª–æ–∫–æ–≤—É—î –ª—é–¥–∏–Ω—É –≤ —á–∞—Ç—ñ\n‚Ä¢<code>+—Å–∞–Ω–∫—Ü–∏–∏</code> - –Ω–∞–∫–ª–∞–¥–∞—î —Å–∞–Ω–∫—Ü—ñ—ó –Ω–∞ –ª—é–¥–∏–Ω—É\n\n---BETA---", parse_mode='HTML')

# info
@dp.message_handler(commands=('info'), commands_prefix=('/!'))
async def info(message: types.Message):
    await message.answer(f"<b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</b>–¶–µ –±–æ—Ç –ö–≤–∞—Ä–¥, —Å—Ç–≤–æ—Ä–µ–Ω–Ω–∏–π –æ–¥–Ω–∏–º —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–º –Ω–Ω-–æ–º, —è–∫–æ–º—É —Å—Ç–∞–ª–æ —Å–∫—É—á–Ω–æ, —ñ –≤—ñ–Ω –≤–∏—Ä—ñ—à–∏–≤ –±–µ–∑ –∑–Ω–∞–Ω—å –Ω—ñ—á–æ–≥–æ –Ω–∞–ø–∏—Å–∞—Ç–∏ —Å–≤–æ–≥–æ –±–æ—Ç–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º—ñ. –ë–æ—Ç –ø–µ—Ä—à–∏–π —Ä–∞–∑ –∑–∞–ø—É—â–µ–Ω–∏–π –≤ —è–∫—ñ—Å—å –≥—Ä—É–ø—ñ 31.10.2022. –¢–∞–∫–æ–∂ (–Ω–∞–¥—ñ—é—Å—å) –≤—ñ–Ω –±—É–¥–µ –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏—Å—å —ñ –¥–∞–ª—ñ, —Ç–æ–º—É —á–µ–∫–∞–π—Ç–µ –Ω–æ–≤–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω—å. –ê —è –π–¥—É –ø–æ–ø—å—é —á–∞—é!üòâ\n\n<b>–°—ñ–º–µ–π—Å—Ç–≤–æ Noki Family:</b>\n‚Ä¢Quard(@QuardNoki_bot) ‚Äî –ë–æ—Ç-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä –ö–≤–∞—Ä–¥, –º–æ–∂–µ –ø–æ–º–æ–≥—Ç–∏ –≤–∞–º –≤–±–∏–≤–∞—Ç–∏ —Ä—É—Å–Ω—é\n‚Ä¢Tech(@Tech_nokibot) ‚Äî –¢–µ—Ö–Ω—ñ—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞\n‚Ä¢StickerID(@asasda_bot) ‚Äî –î–æ–ø–æ–º–æ–∂–µ –≤–∞–º –≤–∑–Ω–∞—Ç–∏ ID —Å—Ç—ñ–∫–µ—Ä—É\n‚Ä¢ToHTML(@ToHTML_nokibot) ‚Äî –ö–æ–Ω–≤–µ—Ä—Ç—É—î —Ç–µ–∫—Å—Ç –∑ —Ç–µ–ª–µ–≥—Ä–∞–º–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è, –Ω–∞ HTML\n\n<b>–¢–µ—Ö–Ω—ñ—á–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</b>\n–ú–æ–≤–∞ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è:Python, Aiogram 2\n–í–µ—Ä—Å—ñ—è –±–æ—Ç—É:0.09\n\n<b>–ö–æ–Ω—Ç–∞–∫—Ç–∏ —ñ —Ç.–¥.</b>\n‚Ä¢–ù–∞—à –∫–∞–Ω–∞–ª: @NokiFamily\n‚Ä¢–ü–æ—Å–∏–¥—ñ–ª–∫–∏ –∑ –∫–≤–∞—Ä–¥–æ–º: @quard_nokifamily\n‚Ä¢–¢–µ—Ö. –ø—ñ–¥—Ç—Ä–∏–º–∫–∞:@Tech_nokibot\n\n<b>–ê–¥–º—ñ–Ω–∏ —ñ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∏:</b>\n‚Ä¢–ì–æ–ª–æ–≤–Ω–∏–π —Ä–æ–∑—Ä–æ–±–Ω–∏–∫: @nnokito\n‚Ä¢–ì–æ–ª–æ–≤–Ω–∏–π –∞–¥–º—ñ–Ω: @jenniemie\n\n<i>–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ñ–≤ —ñ –∞–¥–º—ñ–Ω—ñ–≤ –ø–æ–∫–∏ –Ω–µ–º–∞—î, –∞–ª–µ –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É <u>–º–æ–∂–ª–∏–≤–æ</u> –±—É–¥—É—Ç—å</i>", parse_mode='HTML')

# Quard
@dp.message_handler(commands=('–ö–≤–∞—Ä–¥', 'Quard', '–∫–≤–∞—Ä–¥', 'quard'), commands_prefix=('/!'))
async def quard(message: types.Message):
    await message.answer(f"—à–æ —Ö–æ—á?", parse_mode='HTML')

# QuardNoki_bot
@dp.message_handler(commands=('QuardNoki_bot'), commands_prefix=('/!.@'))
async def mention_quard(message: types.Message):
    await message.reply(f"—à–æ?")

# Password Generator
@dp.message_handler(commands=('password'), commands_prefix=('/!.'))
async def pass_generator(message: types.Message):
    lenght = int(message.get_args())
    lower_case = "abcdefghijklmnopqrstuwxy"
    upper_case = "ABCDEFGHIJKLMNOPQRSTUWXY"
    numbers = "0123456789"
    
    Use_for = lower_case + upper_case + numbers
    lenght_for_pass = lenght

    password = "".join(random.sample(Use_for, lenght_for_pass))
    await message.reply(f"–ö–≤–∞—Ä–¥ –≤–∏–±–∏—Ä–∞—î: {password}")

# Telegram to HTML
@dp.message_handler(commands=('html'))
async def to_html(message: types.Message):
    to_html = message.get_args()
    to_html = str(message.html_text)

    await message.answer(to_html, parse_mode='')
    
    await message.answer(f"<b>–í–∞—à —Ç–µ–∫—Å—Ç</b>:\n\n{message.html_text}", parse_mode="HTML")

# Database
#@dp.message_handler()
#async def mess_handler(message: types.Message):
#    if not db.user_exists(message.from_user.id):
#        db.add_user(message.from_user.id)
