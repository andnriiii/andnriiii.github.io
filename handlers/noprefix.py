from time import sleep
from aiogram import types
from dispatcher import bot, dp
import config
from aiogram.dispatcher.filters import Text
import html
import emoji
import random
import time

my_list = ['–ø—Ä –ø—É–ø—Å—ñ–∫', '–ø—Ä–∏–≤—ñ—Ç', '–ø—Ä–ø—Ä', '–ø—Ä', '–ø—Ä–∏–≤', '—Ö–∞–π', '—Ö–µ–ª–ª–æ—É!']

# Hello
@dp.message_handler(text=['–ø—Ä –ø—É–ø—Å—ñ–∫', '–ø—Ä', '–ø—Ä–∏–≤—ñ—Ç', '–ø—Ä–∏–≤–µ—Ç –ø—É–ø—Å–∏–∫', '–ø—Ä–∏–≤—ñ—Ç –ø—É–ø—Å—ñ–∫', '–ø—Ä –ø—É–ø—Å–∏–∫', '–ø—Ä –∫–≤–∞—Ä–¥', '–ü—Ä'])
async def hello_command(message: types.Message):
    await message.reply(f'{random.choice(my_list)} {message.from_user.full_name}')

# testtests
@dp.message_handler(text=['—Ö—Ç–æ —Ü–µ'])
async def chie_command(message: types.Message):
    if not message.reply_to_message:
        await message.reply("–ü–∏—à–∏ –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è(—Ç—ñ–ª—å–∫–∏ –Ω–µ —Å–≤–æ—î, –Ω–∞–¥—ñ—é—Å—å —Ç–∏ –Ω–µ —î–±–ª–∞–Ω)")
    else:
        await message.reply(f'–¶–µ {message.reply_to_message.from_user.full_name}')


# Pupsik
@dp.message_handler(text=['–ø—É–ø—Å', '–ü—É–ø—Å', '–ü—É–ø—Å–∏–∫', '–ø—É–ø—Å–∏–∫', '–ø—É–ø—Å—ñ–∫', '–ü—É–ø—Å—ñ–∫'])
async def pupsik_command(message: types.Message):
    await message.reply("–ì–æ –≤ –ø–æ–ø–æ—á–∫—é?ü•µüòò")
    await message.chat.do('choose_sticker')

    sleep(2)
    await message.answer_sticker(f'CAACAgIAAx0CY9d2ngABAojtY2qLJpqp-kmMIUGJ3orfhKsJJy4AAhgeAAJe_RhJz_tWnfMlfS8rBA')

# Quard
@dp.message_handler(text=['–∫–≤–∞—Ä–¥', '–ö–≤–∞—Ä–¥', '–ö–≤–∞—Ä–¥–∏–∫'])
async def quard_command(message: types.Message):
    await message.reply("—è —Ç—É—Ç. —à–æ —Ö–æ—á?")

# Tipok
@dp.message_handler(text=['—Ç—ñ–ø–æ–∫', '–¢—ñ–ø–æ–∫', '—Ç–∏–ø–æ–∫', '—Ç—ñ–ø–æ–∫'])
async def tipok(message: types.Message):
    await message.reply(".")

# kapsho
@dp.message_handler(text=['–∫–∞–ø—à–æ'])
async def kapsho_command(message: types.Message):
    await message.reply("–π–¥–∏ –Ω–∞—Ö—É–π –∑—ñ —Å–≤–æ—ó–º –∫–∞–ø—à–æ")
    await message.chat.do('choose_sticker')

    sleep(1)
    await bot.send_sticker('CAACAgEAAxkBAAMEY2bqjosZYfZ1JkMbc8TuQPlVR1oAAnUBAAJ0wPFGOl5jUSP9GyErBA')

# –ü–æ—Å–∏–ª–∞–Ω–Ω—è, —Ç–∏–ø—É –Ω–∞—Ö—É–π –≤ —Å—Ä–∞–∫—É —ñ —Ç.–¥.

# Nahui ua
@dp.message_handler(text=['–π–¥–∏ –Ω–∞—Ö—É–π', '–∏–¥–∏ –Ω–∞—Ö—É–π'])
async def nahui_command(message: types.Message):
    if message.from_user.id == 1093113100:
        if message.reply_to_message:
            await message.reply_to_message.reply(f'–ø–æ–≤–Ω—ñ—Å—Ç—é –∑–≥—ñ–¥–Ω–∏–π, {message.reply_to_message.from_user.full_name} –ø—ñ—à–æ–≤ –Ω–∞—Ö—É–π!')
        else:
            await message.reply(f'—è –∑–≥—ñ–¥–Ω–∏–π –∑ —á–æ, –π–¥–∏ –Ω–∞—Ö—É–π!')
    else:
        await message.reply("—Å–∞–º(–∞) –π–¥–∏üòâ")

# v sraku
@dp.message_handler(text=['–π–¥–∏ –≤ —Å—Ä–∞–∫—É'])
async def vsraku_command(message: types.Message):
    await message.reply("–†–æ—Ç—ñ–∫ –±—É–¥—ñ—à —É —Å—Ç–∞–º–∞—Ç–æ–ª–∞–≥–∞ –∞–∫—Ç—Ä—ñ–≤–∞—Ç—å, –∑–∞—é—à—åüôÑ")

# üôã
@dp.message_handler(text=['üôã'])
async def shos_command(message: types.Message):
    await message.reply_sticker('CAACAgIAAxkBAAICf2Nr7YBBXK5GTTjb0CLmrBTNtXHMAAJnCQACHxFhSlhrS2D5ieFkKwQ')

# üíî
@dp.message_handler(text=['üíî'])
async def shos2_command(message: types.Message):
    await message.reply('–ú–æ–π —Å–ª–∞–¥–∫—ñ–π –ø–µ—Ä—á—ñ–∫ –¥—ñ–º–∞ –¥—ñ–º–∞ —î–≤—Ç—É—à–µ–Ω–∫–∞(–¥—ñ–ª–¥–∞—à–µ–Ω–∫–∞)')

# dani
@dp.message_handler(text=['–¥–∞–Ω—ñ', '–î–∞–Ω—ñ', '–î–∞–ù—ñ', '.–¥–∞–Ω—ñ', '!–¥–∞–Ω—ñ'])
async def dani_command(message: types.Message):
    dani_random = ['–¥–∞', '–Ω—ñ']
    await message.reply(f'—è –≤–∏–±–∏—Ä–∞—é: {random.choice(dani_random)}')

# test
#@dp.message_handler(lambda text: text in ['–ø—Ä', '–ø—Ä–∏–≤—ñ—Ç', '—Ö–µ–ª–ª–æ—É', '—Ö–∞–π'])
#async def test_commands(message: types.Message):
#    await message.reply("–ø—Ä–ø")


# MUTE
@dp.message_handler(text=['–∑–∞—Ç–∫–Ω—É—Ç—å', '–º—É—Ç', '–º–æ–≤—á–∏', '–º–æ–ª—á–∏'], is_admin=True)
async def mute_command(message: types.Message):
    if not message.reply_to_message:
        await message.reply("–ö–æ–º–∞–Ω–¥–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
        return
    else:
        to_mute_time = int(time.mktime(message.date.timetuple())) + 900
        await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_id, until_date=to_mute_time, **config.MUTE_PREMISSION)
        await message.reply("–í—Å—å–æ, —Ç–µ–ø–µ—Ä –º–æ–≤—á–∏ 15 —Ö–≤–∏–ª–∏–Ω, –ø–æ–¥—É–º–∞–π –Ω–∞–¥ —Å–≤–æ—î—é –ø–æ–≤–µ–¥—ñ–Ω–∫–æ—é")
    return

# gpdjj
@dp.message_handler(text=['–ß–æ –≤–µ—Ä–Ω–∏—Å—å\n–¥–∏–≤–∏—Å—å –Ω–µ —Å–ø–æ—Ç–∫–Ω–∏—Å—å\n–≤ –Ω–∞—Å –±—ñ–¥–∞\n–Ω–µ –≤–µ—Ä–Ω–µ—à—Å—è ‚Äî –ø—ñ–∑–¥–∞'])
async def gpdjj(message: types.Message):
    await message.reply(f'–ü—Ä–∏–∑–∏–≤–∞—é –ß–æ!!')

    sleep(1)
    await bot.send_message(1093113100, f'{message.from_user.mention} –¢–ï–ë–ï –í–ò–ö–õ–ò–ö–ê–Ñ –í –§–ù–†, –•–≤–∞—Ç–∞–π –º–æ–Ω–∞—Ç–∫–∏ —ñ –ø—ñ–∑–¥—É–π —Ç—É–¥–∏! @FNRslava')